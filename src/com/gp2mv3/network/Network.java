package com.gp2mv3.network;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URLEncoder;
import java.security.MessageDigest;
import java.util.ArrayList;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.protocol.HTTP;
import org.json.JSONException;
import org.json.JSONObject;

import android.util.Base64;

/**
 * This class execute everything in touch with the Network
 * @author gp2mv3
 * @date 21/12/2011
 */
public class Network
{
	private ArrayList <NameValuePair> params;
	private ArrayList <NameValuePair> headers;

	private String url;

	private int responseCode;
	private String message;

	private String response;
	private JSONObject json;
	private String user;
	
	/**
	 * Request types
	 */
	public enum RequestMethod
	{
		GET,
		POST
	}

	/**
	 * Return the response (string)
	 * @return the response
	 */
	public String getResponse()
	{
		return response;
	}

	/**
	 * Return the error message
	 * @return message
	 */
	public String getErrorMessage()
	{
		return message;
	}

	/**
	 * The response code (200 = OK)
	 * @return code
	 */
	public int getResponseCode()
	{
		return responseCode;
	}

	/**
	 * Constructor.
	 * @param url the url to the page
	 */
	public Network(String url)
	{
		
		this.url = url;
		params = new ArrayList<NameValuePair>();
		headers = new ArrayList<NameValuePair>();
	}

	/**
	 * Add a parameter to the parameters to send.
	 * @param name the name key
	 * @param value the value
	 */
	public void AddParam(String name, String value)
	{
		params.add(new BasicNameValuePair(name, value));
	}

	/**
	 * add a parameter to Header
	 * @param name the name key
	 * @param value the value of the parameter
	 */
	public void AddHeader(String name, String value)
	{
		headers.add(new BasicNameValuePair(name, value));
	}

	/**
	 * Execute the request to the web server
	 * @param method
	 * @throws Exception
	 */
	public void execute(RequestMethod method) throws Exception
	{
		switch(method)
		{
		case GET:
		{
			//add parameters
			String combinedParams = "";
			if(!params.isEmpty())
			{
				combinedParams += "?";
				for(NameValuePair p : params)
				{
					String paramString = p.getName() + "=" + URLEncoder.encode(p.getValue(), "UTF-8");

					if(combinedParams.length() > 1)
						combinedParams  +=  "&" + paramString;
					else
						combinedParams += paramString;
				}
			}

			HttpGet request = new HttpGet(url + combinedParams);

			//add headers
			for(NameValuePair h : headers)
			{
				request.addHeader(h.getName(), h.getValue());
			}

			executeRequest(request, url);
			break;
		}
		case POST:
		{
			HttpPost request = new HttpPost(url);

			//add headers
			for(NameValuePair h : headers)
			{
				request.addHeader(h.getName(), h.getValue());
			}

			if(!params.isEmpty()){
				request.setEntity(new UrlEncodedFormEntity(params, HTTP.UTF_8));
			}

			executeRequest(request, url);
			break;
		}
		}
	}

	/**
	 * This add the authenticate parameter
	 * @param login
	 * @param pass
	 */
	public void authenticate(String login, String pass)
	{
		user = Base64.encodeToString((login+":"+pass).getBytes(), Base64.DEFAULT).trim();
		String base= "Basic "+user;
		this.AddHeader("Authorization", base);
	}
	
	/**
	 * Execute the request itself
	 * @param request is the request generated by execute
	 * @param url the url of the page to request
	 */
	private void executeRequest(HttpUriRequest request, String url)
	{
		HttpClient client = new DefaultHttpClient();

		HttpResponse httpResponse;

		try
		{
			httpResponse = client.execute(request);
			responseCode = httpResponse.getStatusLine().getStatusCode();
			message = httpResponse.getStatusLine().getReasonPhrase();

			HttpEntity entity = httpResponse.getEntity();

			if (entity != null)
			{
				InputStream instream = entity.getContent();
				response = convertStreamToString(instream);

				// Closing the input stream will trigger connection release
				instream.close();
			}

		}
		catch (ClientProtocolException e) 
		{
			client.getConnectionManager().shutdown();
			e.printStackTrace();
		}
		catch (IOException e)
		{
			client.getConnectionManager().shutdown();
			e.printStackTrace();
		}
	}

	/**
	 * Everything is in the name
	 * @param is the stream
	 * @return the string corresponding
	 */
	private static String convertStreamToString(InputStream is)
	{
		BufferedReader reader = new BufferedReader(new InputStreamReader(is));
		StringBuilder sb = new StringBuilder();

		String line = null;
		try
		{
			while ((line = reader.readLine()) != null)
				sb.append(line + "\n");
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try
			{
				is.close();
			}
			catch (IOException e)
			{
				e.printStackTrace();
			}
		}
		return sb.toString();
	}


	/**
	 * Convert a string to sha1
	 * @param input the string
	 * @return the sha1 signature
	 */
	public static String sha1(String input)
	{
		try
		{
			MessageDigest sha1 = MessageDigest.getInstance("SHA1");
			byte[] digest = sha1.digest((input).getBytes());
			input = bytes2String(digest);
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return null;
		}

		return input;
	}

	/**
	 * Conversion des mots de passe en sha1 (conversion du digest en txt)
	 * @param bytes the bytes to convert
	 * @return the corresponding string
	 */
	public static String bytes2String(byte[] bytes)
	{
		StringBuilder string = new StringBuilder();
		for (byte b: bytes)
		{
			String hexString = Integer.toHexString(0x00FF & b);
			string.append(hexString.length() == 1 ? "0" + hexString : hexString);
		}
		return string.toString();
	}

	/**
	 * Return the JSON string
	 * @return json (string)
	 * @throws JSONException 
	 */
	public JSONObject getJson() throws JSONException {
		if(response == null)
			throw new JSONException("null pointer");
		
		json = new JSONObject(response);
		return json;
	}

	public String getUser() {
		return user;
	}

	public void setUser(String user) {
		this.user = user;
		String base = "Basic "+user;
		this.AddHeader("Authorization", base);
	}
}
